-- 1. Создание базы данных "Магазин"
CREATE DATABASE Магазин;
USE Магазин;

-- 2. Создание специальной таблицы для управления идентификаторами
CREATE TABLE СпецТаблица (
    Идентификатор INT PRIMARY KEY,
    ИмяТаблицы VARCHAR(255) NOT NULL,
    ИмяСтолбца VARCHAR(255) NOT NULL,
    ТекущееМаксимальноеЗначение INT NOT NULL
);

-- 3. Добавление начальной записи в "СпецТаблица"
INSERT INTO СпецТаблица (Идентификатор, ИмяТаблицы, ИмяСтолбца, ТекущееМаксимальноеЗначение)
VALUES (1, 'СпецТаблица', 'Идентификатор', 1);

-- 4. Создание хранимой процедуры
DELIMITER $$

CREATE PROCEDURE ПолучитьСледующееЗначение(
    IN ИмяТаблицы VARCHAR(255),
    IN ИмяСтолбца VARCHAR(255),
    OUT СледующееЗначение INT
)
BEGIN
    DECLARE МаксЗначениеВТаблице INT DEFAULT NULL;
    DECLARE НайденныйИдентификатор INT;

    -- Проверяем, существует ли запись в "СпецТаблица"
    SELECT Идентификатор, ТекущееМаксимальноеЗначение INTO НайденныйИдентификатор, СледующееЗначение
    FROM СпецТаблица
    WHERE ИмяТаблицы = ИмяТаблицы AND ИмяСтолбца = ИмяСтолбца
    LIMIT 1;

    IF НайденныйИдентификатор IS NOT NULL THEN
        -- Если запись найдена, увеличиваем значение
        SET СледующееЗначение = СледующееЗначение + 1;
        UPDATE СпецТаблица
        SET ТекущееМаксимальноеЗначение = СледующееЗначение
        WHERE Идентификатор = НайденныйИдентификатор;
    ELSE
        -- Если записи нет, определяем максимальное значение в указанной таблице
        SET @Запрос = CONCAT('SELECT MAX(', ИмяСтолбца, ') INTO @МаксЗначение FROM ', ИмяТаблицы);
        PREPARE stmt FROM @Запрос;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        IF @МаксЗначение IS NULL THEN
            SET МаксЗначениеВТаблице = 0;
        ELSE
            SET МаксЗначениеВТаблице = @МаксЗначение;
        END IF;

        SET СледующееЗначение = МаксЗначениеВТаблице + 1;

        -- Добавляем новую запись в "СпецТаблица"
        INSERT INTO СпецТаблица (Идентификатор, ИмяТаблицы, ИмяСтолбца, ТекущееМаксимальноеЗначение)
        VALUES ((SELECT MAX(Идентификатор) + 1 FROM СпецТаблица), ИмяТаблицы, ИмяСтолбца, СледующееЗначение);

        -- Создание триггера для отслеживания превышения
        SET @TriggerName = CONCAT('Trig_', ИмяТаблицы, '_', ИмяСтолбца, '_UpdateMax');
        SET @TriggerQuery = CONCAT(
            'CREATE TRIGGER ', @TriggerName, '
            AFTER INSERT OR UPDATE ON ', ИмяТаблицы, '
            FOR EACH ROW
            BEGIN
                IF NEW.', ИмяСтолбца, ' > (SELECT ТекущееМаксимальноеЗначение FROM СпецТаблица WHERE ИмяТаблицы = "', ИмяТаблицы, '" AND ИмяСтолбца = "', ИмяСтолбца, '") THEN
                    UPDATE СпецТаблица
                    SET ТекущееМаксимальноеЗначение = NEW.', ИмяСтолбца, '
                    WHERE ИмяТаблицы = "', ИмяТаблицы, '" AND ИмяСтолбца = "', ИмяСтолбца, '";
                END IF;
            END;'
        );

        PREPARE stmt FROM @TriggerQuery;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;
END$$

DELIMITER ;

-- 5. Создание таблиц для магазина
CREATE TABLE Товары (
    Идентификатор INT PRIMARY KEY,
    Название VARCHAR(255),
    Цена DECIMAL(10, 2),
    КоличествоНаСкладе INT
);

CREATE TABLE Покупатели (
    Идентификатор INT PRIMARY KEY AUTO_INCREMENT,
    Имя VARCHAR(100) NOT NULL,
    Фамилия VARCHAR(100) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Телефон VARCHAR(15),
    Адрес VARCHAR(255)
);

CREATE TABLE Заказы (
    Идентификатор INT PRIMARY KEY AUTO_INCREMENT,
    ПокупательID INT NOT NULL,
    ДатаЗаказа TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ОбщаяСумма DECIMAL(10, 2) NOT NULL,
    Статус ENUM('В обработке', 'Завершён', 'Отменён') DEFAULT 'В обработке',
    FOREIGN KEY (ПокупательID) REFERENCES Покупатели(Идентификатор) ON DELETE CASCADE
);

CREATE TABLE ДеталиЗаказа (
    Идентификатор INT PRIMARY KEY AUTO_INCREMENT,
    ЗаказID INT NOT NULL,
    ТоварID INT NOT NULL,
    Количество INT NOT NULL,
    Цена DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (ЗаказID) REFERENCES Заказы(Идентификатор) ON DELETE CASCADE,
    FOREIGN KEY (ТоварID) REFERENCES Товары(Идентификатор) ON DELETE CASCADE
);

-- 6. Наполнение тестовыми данными
INSERT INTO Товары (Идентификатор, Название, Цена, КоличествоНаСкладе)
VALUES (1, 'Ноутбук', 75000.00, 10),
       (2, 'Смартфон', 50000.00, 20),
       (3, 'Наушники', 3000.00, 50);

INSERT INTO Покупатели (Имя, Фамилия, Email, Телефон, Адрес)
VALUES ('Иван', 'Иванов', 'ivanov@example.com', '89001112233', 'ул. Ленина, 1'),
       ('Мария', 'Петрова', 'petrova@example.com', '89002223344', 'ул. Гагарина, 5');

INSERT INTO Заказы (ПокупательID, ОбщаяСумма, Статус)
VALUES (1, 80000.00, 'Завершён');

INSERT INTO ДеталиЗаказа (ЗаказID, ТоварID, Количество, Цена)
VALUES (1, 1, 1, 75000.00),
       (1, 3, 1, 3000.00);

-- 7. Тестирование процедуры
-- Вызов процедуры для таблицы "Товары"
CALL ПолучитьСледующееЗначение('Товары', 'Идентификатор', @СледующееЗначение);
SELECT @СледующееЗначение; -- Ожидается 4

-- Вставка записи в обход процедуры
INSERT INTO Товары (Идентификатор, Название, Цена, КоличествоНаСкладе)
VALUES (10, 'Клавиатура', 5000.00, 15);

-- Проверка обновления "СпецТаблица"
SELECT * FROM СпецТаблица;

-- Обновление записи с превышением максимального значения
UPDATE Товары SET Идентификатор = 20 WHERE Идентификатор = 10;

-- Проверка триггера
SELECT * FROM СпецТаблица;

-- Удаление процедуры и таблиц
DROP PROCEDURE ПолучитьСледующееЗначение;
DROP TABLE Товары, Покупатели, Заказы, ДеталиЗаказа, СпецТаблица;
